/**
 * SNS Notifications Module
 *
 * Handles sending formatted SNS notifications with emojis and structured content.
 */

const { SNSClient, PublishCommand } = require('@aws-sdk/client-sns');

const snsClient = new SNSClient({ region: process.env.AWS_REGION || 'us-east-1' });

/**
 * Send success notification
 * @param {string} topicArn - SNS topic ARN
 * @param {string} functionArn - Lambda function ARN
 * @param {Object} metrics - Success metrics
 */
async function sendSuccessNotification(topicArn, functionArn, metrics) {
  const subject = '✅ AWS Service Report Generated Successfully';

  const message = `✅ AWS Service Report Generation Complete

📊 Report Details
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Generated: ${new Date().toISOString().replace('T', ' ').replace(/\.\d{3}Z$/, ' UTC')}
• Processing Time: ${metrics.processingTime}
• Report Size: ${metrics.reportSize}

📁 Report Locations
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Latest Report:
${metrics.latestReportPath}

Archive Report:
${metrics.archiveReportPath}

📈 Data Summary
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• AWS Regions: ${metrics.regionCount}
• AWS Services: ${metrics.serviceCount}
• Service-by-Region Mappings: ${metrics.serviceMappingCount.toLocaleString()}
• Data Schema Version: ${metrics.dataSchemaVersion}
• Data Timestamp: ${metrics.dataTimestamp}

📂 Archive Management
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Reports Retained: ${metrics.archivedReportsRetained} (7 days)
• Reports Deleted: ${metrics.archivedReportsDeleted} (older than 7 days)

---
Generated by aws-service-report-generator
Lambda Function: ${functionArn}`;

  await publishSNS(topicArn, subject, message);
}

/**
 * Send failure notification
 * @param {string} topicArn - SNS topic ARN
 * @param {string} functionArn - Lambda function ARN
 * @param {Object} errorDetails - Error details
 */
async function sendFailureNotification(topicArn, functionArn, errorDetails) {
  const subject = '❌ AWS Service Report Generation Failed';

  const message = `❌ AWS Service Report Generation Failed

⚠️ Error Details
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Error Type: ${errorDetails.errorType}
• Error Message: ${errorDetails.error}
• Timestamp: ${new Date().toISOString().replace('T', ' ').replace(/\.\d{3}Z$/, ' UTC')}
• Processing Time: ${errorDetails.processingTime}

📁 Source File
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Bucket: ${errorDetails.sourceBucket}
• Key: ${errorDetails.sourceKey}
• Full Path: s3://${errorDetails.sourceBucket}/${errorDetails.sourceKey}

🔍 Troubleshooting Steps
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. Verify the source file exists in S3
2. Check aws-infrastructure-fetcher Lambda execution logs
3. Verify data fetcher completed successfully at 2 AM UTC
4. Check S3 bucket permissions
5. Review CloudWatch logs for detailed error trace

📊 CloudWatch Logs
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Log Group: /aws/lambda/aws-service-report-generator
Search for error details in the latest log stream

---
Generated by aws-service-report-generator
Lambda Function: ${functionArn}`;

  await publishSNS(topicArn, subject, message);
}

/**
 * Send warning notification (for non-critical issues)
 * @param {string} topicArn - SNS topic ARN
 * @param {string} functionArn - Lambda function ARN
 * @param {Object} metrics - Success metrics
 * @param {string} warningMessage - Warning message
 */
async function sendWarningNotification(topicArn, functionArn, metrics, warningMessage) {
  const subject = '⚠️ AWS Service Report Generated with Warnings';

  const message = `⚠️ AWS Service Report Generated with Warnings

✅ Report Status
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Report was generated successfully, but some non-critical issues occurred.

📁 Report Locations
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Latest Report:
${metrics.latestReportPath}

Archive Report:
${metrics.archiveReportPath}

⚠️ Warning Details
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Issue: Archive retention cleanup partially failed
• Details: ${warningMessage}
• Impact: Low - Manual cleanup may be needed eventually
• Timestamp: ${new Date().toISOString().replace('T', ' ').replace(/\.\d{3}Z$/, ' UTC')}

📈 Data Summary
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• AWS Regions: ${metrics.regionCount}
• AWS Services: ${metrics.serviceCount}
• Processing Time: ${metrics.processingTime}
• Report Size: ${metrics.reportSize}

---
Generated by aws-service-report-generator
Lambda Function: ${functionArn}`;

  await publishSNS(topicArn, subject, message);
}

/**
 * Publish message to SNS topic
 * @param {string} topicArn - SNS topic ARN
 * @param {string} subject - Message subject
 * @param {string} message - Message body
 */
async function publishSNS(topicArn, subject, message) {
  try {
    const command = new PublishCommand({
      TopicArn: topicArn,
      Subject: subject,
      Message: message
    });

    const response = await snsClient.send(command);
    console.log(`📧 SNS notification sent: ${response.MessageId}`);
  } catch (error) {
    console.error('❌ Failed to send SNS notification:', error);
    throw new Error(`SNS notification failed: ${error.message}`);
  }
}

module.exports = {
  sendSuccessNotification,
  sendFailureNotification,
  sendWarningNotification
};
